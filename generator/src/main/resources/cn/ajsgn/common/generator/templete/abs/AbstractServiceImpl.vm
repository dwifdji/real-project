#*
 * Copyright (c) 2017, Ajsgn 杨光 (Ajsgn@foxmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
package ${basePackage_}.${templeteVariable_.absPackage};

import java.util.List;

/**
 * <p>服务接口的抽象实现</p>
 * @ClassName: Abstract${templeteVariable_.serviceSuffix}${templeteVariable_.implSuffix}
 * @Description: <p>服务接口的抽象实现</p>
 * @author Generator
 * @date ${createDate_}
 * @param <E> Element 查询结果返回类型元素
 * @param <C> ${templeteVariable_.conditionSuffix} 查询条件
 * @param <D> ${templeteVariable_.daoSuffix} 数据层操作支持
 */
public abstract class Abstract${templeteVariable_.serviceSuffix}${templeteVariable_.implSuffix}<E,C extends Dao${templeteVariable_.conditionSuffix},D extends Base${templeteVariable_.daoSuffix}<E, C>> implements Base${templeteVariable_.serviceSuffix}<E,C> {
	
	@Override
	public int updateById(E ${templeteVariable_.entityPackage}) {
		return daoSupport().updateById(${templeteVariable_.entityPackage});
	}

	@Override
	public List<E> selectAll() {
		C dao${templeteVariable_.conditionSuffix} = blank${templeteVariable_.conditionSuffix}();
		return selectList(dao${templeteVariable_.conditionSuffix});
	}
	
	@Override
	public int insert(E ${templeteVariable_.entityPackage}) {
		return daoSupport().insert(${templeteVariable_.entityPackage});
	}
	
	/**
	 * <p>查询一个符合条件的记录，即查询一条数据记录，如果有多条符合条件的结果，则返回第一条</p>
	 * <p>这个方法的思想，在于只希望获取一个对象，如果获取对象，说明查询条件的唯一索引没有成功建立！是否需要抛异常，自行修改~</p>
	 * @Title: selectFirst
	 * @Description: 查询一个符合条件的记录
	 * @param dao${templeteVariable_.conditionSuffix} 查询条件
	 * @return E 查询结果
	 * @author Generator
	 * @date ${createDate_}
	 */
	@Override
	public E selectFirst(C dao${templeteVariable_.conditionSuffix}){
		E result = null;
		List<E> list = selectList(dao${templeteVariable_.conditionSuffix});
		if(null != list && false == list.isEmpty()){
			result = list.get(0);
		}
		return result;
	}
	
	/**
	 * <p>查询一个结果集合</p>
	 * @Title: selectList
	 * @Description: 查询一个结果集合
	 * @param dao${templeteVariable_.conditionSuffix} 查询条件
	 * @return List<E> 查询结果
	 * @author Generator
	 * @date ${createDate_}
	 */
	@Override
	public List<E> selectList(C dao${templeteVariable_.conditionSuffix}){
		D dao = daoSupport();
		return dao.selectBy${templeteVariable_.conditionSuffix}(dao${templeteVariable_.conditionSuffix});
	}
	
	/**
	 * <p>DAO对象提供支持</p>
	 * <p>因为是抽象类，不在spring环境下，所有，由子类自身提供操作对象</p>
	 * @Title: daoSupport
	 * @Description: DAO对象提供支持
	 * @return D DAO操作对象
	 * @author Generator
	 * @date ${createDate_}
	 */
	protected abstract D daoSupport();
	
	/**
	 * <p>提供一个空白的查询条件</p>
	 * @Title: blank${templeteVariable_.conditionSuffix}
	 * @Description: 提供一个空白的查询条件
	 * @return C 一个空白条件的查询条件
	 * @author Generator
	 * @date ${createDate_}
	 */
	protected abstract C blank${templeteVariable_.conditionSuffix}();

}
